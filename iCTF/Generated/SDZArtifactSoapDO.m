/*
	SDZArtifactSoapDO.h
	The implementation of properties and methods for the SDZArtifactSoapDO object.
	Generated by SudzC.com
*/
#import "SDZArtifactSoapDO.h"

#import "SDZSoapFieldValues.h"
@implementation SDZArtifactSoapDO
	@synthesize actualEffort = _actualEffort;
	@synthesize assignedTo = _assignedTo;
	@synthesize autosumming = _autosumming;
	@synthesize category = _category;
	@synthesize closeDate = _closeDate;
	@synthesize customer = _customer;
	@synthesize description = _description;
	@synthesize estimatedEffort = _estimatedEffort;
	@synthesize flexFields = _flexFields;
	@synthesize group = _group;
	@synthesize planningFolderId = _planningFolderId;
	@synthesize points = _points;
	@synthesize priority = _priority;
	@synthesize remainingEffort = _remainingEffort;
	@synthesize reportedReleaseId = _reportedReleaseId;
	@synthesize resolvedReleaseId = _resolvedReleaseId;
	@synthesize status = _status;
	@synthesize statusClass = _statusClass;

	- (id) init
	{
		if(self = [super init])
		{
			self.assignedTo = nil;
			self.category = nil;
			self.closeDate = nil;
			self.customer = nil;
			self.description = nil;
			self.flexFields = nil; // [[SDZSoapFieldValues alloc] init];
			self.group = nil;
			self.planningFolderId = nil;
			self.reportedReleaseId = nil;
			self.resolvedReleaseId = nil;
			self.status = nil;
			self.statusClass = nil;

		}
		return self;
	}

	+ (SDZArtifactSoapDO*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (SDZArtifactSoapDO*)[[[SDZArtifactSoapDO alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.actualEffort = [[Soap getNodeValue: node withName: @"actualEffort"] intValue];
			self.assignedTo = [Soap getNodeValue: node withName: @"assignedTo"];
			self.autosumming = [[Soap getNodeValue: node withName: @"autosumming"] boolValue];
			self.category = [Soap getNodeValue: node withName: @"category"];
			self.closeDate = [Soap dateFromString: [Soap getNodeValue: node withName: @"closeDate"]];
			self.customer = [Soap getNodeValue: node withName: @"customer"];
			self.description = [Soap getNodeValue: node withName: @"description"];
			self.estimatedEffort = [[Soap getNodeValue: node withName: @"estimatedEffort"] intValue];
			self.flexFields = [[SDZSoapFieldValues newWithNode: [Soap getNode: node withName: @"flexFields"]] object];
			self.group = [Soap getNodeValue: node withName: @"group"];
			self.planningFolderId = [Soap getNodeValue: node withName: @"planningFolderId"];
			self.points = [[Soap getNodeValue: node withName: @"points"] intValue];
			self.priority = [[Soap getNodeValue: node withName: @"priority"] intValue];
			self.remainingEffort = [[Soap getNodeValue: node withName: @"remainingEffort"] intValue];
			self.reportedReleaseId = [Soap getNodeValue: node withName: @"reportedReleaseId"];
			self.resolvedReleaseId = [Soap getNodeValue: node withName: @"resolvedReleaseId"];
			self.status = [Soap getNodeValue: node withName: @"status"];
			self.statusClass = [Soap getNodeValue: node withName: @"statusClass"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"ArtifactSoapDO"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		[s appendFormat: @"<actualEffort>%@</actualEffort>", [NSString stringWithFormat: @"%i", self.actualEffort]];
		if (self.assignedTo != nil) [s appendFormat: @"<assignedTo>%@</assignedTo>", [[self.assignedTo stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<autosumming>%@</autosumming>", (self.autosumming)?@"true":@"false"];
		if (self.category != nil) [s appendFormat: @"<category>%@</category>", [[self.category stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.closeDate != nil) [s appendFormat: @"<closeDate>%@</closeDate>", [Soap getDateString: self.closeDate]];
		if (self.customer != nil) [s appendFormat: @"<customer>%@</customer>", [[self.customer stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.description != nil) [s appendFormat: @"<description>%@</description>", [[self.description stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<estimatedEffort>%@</estimatedEffort>", [NSString stringWithFormat: @"%i", self.estimatedEffort]];
		if (self.flexFields != nil) [s appendString: [self.flexFields serialize: @"flexFields"]];
		if (self.group != nil) [s appendFormat: @"<group>%@</group>", [[self.group stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.planningFolderId != nil) [s appendFormat: @"<planningFolderId>%@</planningFolderId>", [[self.planningFolderId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<points>%@</points>", [NSString stringWithFormat: @"%i", self.points]];
		[s appendFormat: @"<priority>%@</priority>", [NSString stringWithFormat: @"%i", self.priority]];
		[s appendFormat: @"<remainingEffort>%@</remainingEffort>", [NSString stringWithFormat: @"%i", self.remainingEffort]];
		if (self.reportedReleaseId != nil) [s appendFormat: @"<reportedReleaseId>%@</reportedReleaseId>", [[self.reportedReleaseId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.resolvedReleaseId != nil) [s appendFormat: @"<resolvedReleaseId>%@</resolvedReleaseId>", [[self.resolvedReleaseId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.status != nil) [s appendFormat: @"<status>%@</status>", [[self.status stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.statusClass != nil) [s appendFormat: @"<statusClass>%@</statusClass>", [[self.statusClass stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[SDZArtifactSoapDO class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.assignedTo != nil) { [self.assignedTo release]; }
		if(self.category != nil) { [self.category release]; }
		if(self.closeDate != nil) { [self.closeDate release]; }
		if(self.customer != nil) { [self.customer release]; }
		if(self.description != nil) { [self.description release]; }
		if(self.flexFields != nil) { [self.flexFields release]; }
		if(self.group != nil) { [self.group release]; }
		if(self.planningFolderId != nil) { [self.planningFolderId release]; }
		if(self.reportedReleaseId != nil) { [self.reportedReleaseId release]; }
		if(self.resolvedReleaseId != nil) { [self.resolvedReleaseId release]; }
		if(self.status != nil) { [self.status release]; }
		if(self.statusClass != nil) { [self.statusClass release]; }
		[super dealloc];
	}

@end
