/*
	SDZArtifactDependencySoapRow.h
	The implementation of properties and methods for the SDZArtifactDependencySoapRow object.
	Generated by SudzC.com
*/
#import "SDZArtifactDependencySoapRow.h"

@implementation SDZArtifactDependencySoapRow
	@synthesize description = _description;
	@synthesize hasViewPermission = _hasViewPermission;
	@synthesize originId = _originId;
	@synthesize originStatus = _originStatus;
	@synthesize originStatusClass = _originStatusClass;
	@synthesize originTitle = _originTitle;
	@synthesize targetId = _targetId;
	@synthesize targetStatus = _targetStatus;
	@synthesize targetStatusClass = _targetStatusClass;
	@synthesize targetTitle = _targetTitle;
	@synthesize trackerIcon = _trackerIcon;

	- (id) init
	{
		if(self = [super init])
		{
			self.description = nil;
			self.originId = nil;
			self.originStatus = nil;
			self.originStatusClass = nil;
			self.originTitle = nil;
			self.targetId = nil;
			self.targetStatus = nil;
			self.targetStatusClass = nil;
			self.targetTitle = nil;
			self.trackerIcon = nil;

		}
		return self;
	}

	+ (SDZArtifactDependencySoapRow*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (SDZArtifactDependencySoapRow*)[[[SDZArtifactDependencySoapRow alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.description = [Soap getNodeValue: node withName: @"description"];
			self.hasViewPermission = [[Soap getNodeValue: node withName: @"hasViewPermission"] boolValue];
			self.originId = [Soap getNodeValue: node withName: @"originId"];
			self.originStatus = [Soap getNodeValue: node withName: @"originStatus"];
			self.originStatusClass = [Soap getNodeValue: node withName: @"originStatusClass"];
			self.originTitle = [Soap getNodeValue: node withName: @"originTitle"];
			self.targetId = [Soap getNodeValue: node withName: @"targetId"];
			self.targetStatus = [Soap getNodeValue: node withName: @"targetStatus"];
			self.targetStatusClass = [Soap getNodeValue: node withName: @"targetStatusClass"];
			self.targetTitle = [Soap getNodeValue: node withName: @"targetTitle"];
			self.trackerIcon = [Soap getNodeValue: node withName: @"trackerIcon"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"ArtifactDependencySoapRow"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.description != nil) [s appendFormat: @"<description>%@</description>", [[self.description stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<hasViewPermission>%@</hasViewPermission>", (self.hasViewPermission)?@"true":@"false"];
		if (self.originId != nil) [s appendFormat: @"<originId>%@</originId>", [[self.originId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.originStatus != nil) [s appendFormat: @"<originStatus>%@</originStatus>", [[self.originStatus stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.originStatusClass != nil) [s appendFormat: @"<originStatusClass>%@</originStatusClass>", [[self.originStatusClass stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.originTitle != nil) [s appendFormat: @"<originTitle>%@</originTitle>", [[self.originTitle stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.targetId != nil) [s appendFormat: @"<targetId>%@</targetId>", [[self.targetId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.targetStatus != nil) [s appendFormat: @"<targetStatus>%@</targetStatus>", [[self.targetStatus stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.targetStatusClass != nil) [s appendFormat: @"<targetStatusClass>%@</targetStatusClass>", [[self.targetStatusClass stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.targetTitle != nil) [s appendFormat: @"<targetTitle>%@</targetTitle>", [[self.targetTitle stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.trackerIcon != nil) [s appendFormat: @"<trackerIcon>%@</trackerIcon>", [[self.trackerIcon stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[SDZArtifactDependencySoapRow class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.description != nil) { [self.description release]; }
		if(self.originId != nil) { [self.originId release]; }
		if(self.originStatus != nil) { [self.originStatus release]; }
		if(self.originStatusClass != nil) { [self.originStatusClass release]; }
		if(self.originTitle != nil) { [self.originTitle release]; }
		if(self.targetId != nil) { [self.targetId release]; }
		if(self.targetStatus != nil) { [self.targetStatus release]; }
		if(self.targetStatusClass != nil) { [self.targetStatusClass release]; }
		if(self.targetTitle != nil) { [self.targetTitle release]; }
		if(self.trackerIcon != nil) { [self.trackerIcon release]; }
		[super dealloc];
	}

@end
