/*
	SDZCollabNetSoapService.m
	The implementation classes and methods for the CollabNetSoapService web service.
	Generated by SudzC.com
*/

#import "SDZCollabNetSoapService.h"
				
#import "Soap.h"
	
#import "SDZWebServiceFault.h"
#import "SDZInvalidSessionFault.h"
#import "SDZNoSuchObjectFault.h"
#import "SDZVersionMismatchFault.h"
#import "SDZLastSuperUserFault.h"
#import "SDZIllegalUserModificationFault.h"
#import "SDZPermissionDeniedFault.h"
#import "SDZSystemFault.h"
#import "SDZUserLimitExceededFault.h"
#import "SDZIllegalArgumentFault.h"
#import "SDZLoginFault.h"
#import "SDZObjectAlreadyExistsFault.h"
#import "SDZChangeParentNotAllowedFault.h"
#import "SDZParentRoleUsedInChildProjectsFault.h"
#import "SDZChildProjectsFoundFault.h"
#import "SDZSearchQuerySyntaxFault.h"
#import "SDZRemoveOnlyProjectAdminFault.h"
#import "SDZInvalidPasswordFault.h"
#import "SDZInvalidOperationFault.h"
#import "SDZProjectAlreadyLockedFault.h"
#import "SDZIllegalGroupMemberAddFault.h"
#import "SDZArrayOf_tns1_AttachmentSoapRow.h"
#import "SDZArrayOf_xsd_string.h"
#import "SDZArrayOf_tns1_ProjectSoapRow.h"
#import "SDZArrayOf_tns1_UserSoapRow.h"
#import "SDZArrayOf_tns1_ProjectGroupSoapRow.h"
#import "SDZArrayOf_tns1_VersionInformationSoapRow.h"
#import "SDZArrayOf_tns1_UserGroupSoapRow.h"
#import "SDZArrayOf_tns1_ProjectMemberSoapRow.h"
#import "SDZArrayOf_tns1_CommentSoapRow.h"
#import "SDZArrayOf_tns1_AssociationSoapRow.h"
#import "SDZArrayOf_tns1_AuditHistorySoapRow.h"
#import "SDZArrayOf_tns1_ProjectGroupMemberSoapRow.h"
#import "SDZAttachmentSoapList.h"
#import "SDZProjectSoapList.h"
#import "SDZUserSoapList.h"
#import "SDZProjectGroupSoapList.h"
#import "SDZVersionInformationSoapList.h"
#import "SDZUserGroupSoapList.h"
#import "SDZProjectMemberSoapList.h"
#import "SDZCommentSoapList.h"
#import "SDZAssociationSoapList.h"
#import "SDZAuditHistorySoapList.h"
#import "SDZProjectGroupMemberSoapList.h"
#import "SDZAttachmentSoapRow.h"
#import "SDZAssociationSoapRow.h"
#import "SDZUserSoapDO.h"
#import "SDZUserSoapRow.h"
#import "SDZSoapFilter.h"
#import "SDZSoapNamedValues.h"
#import "SDZUserGroupSoapDO.h"
#import "SDZProjectGroupSoapDO.h"
#import "SDZUserGroupSoapRow.h"
#import "SDZProjectMemberSoapRow.h"
#import "SDZProjectGroupMemberSoapRow.h"
#import "SDZVersionInformationSoapRow.h"
#import "SDZObjectSoapDO.h"
#import "SDZProjectSoapDO.h"
#import "SDZProjectGroupSoapRow.h"
#import "SDZCommentSoapRow.h"
#import "SDZProjectSoapRow.h"
#import "SDZAuditHistorySoapRow.h"

/* Implementation of the service */
				
@implementation SDZCollabNetSoapService

	- (id) init
	{
		if(self = [super init])
		{
			self.serviceUrl = @"https://forge.collab.net/ce-soap60/services/CollabNet";
			self.namespace = @"http://schema.open.collab.net/sfee50/soap60/service";
			self.headers = nil;
			self.logging = NO;
		}
		return self;
	}

    - (id) initWithUrl: (NSString*) url {
        if(self = [super initWithUrl:url]) {
        }
        return self;
    }

	- (id) initWithUsername: (NSString*) username andPassword: (NSString*) password {
		if(self = [super initWithUsername:username andPassword:password]) {
		}
		return self;
	}
	
	+ (SDZCollabNetSoapService*) service {
		return [SDZCollabNetSoapService serviceWithUsername:nil andPassword:nil];
	}
	
	+ (SDZCollabNetSoapService*) serviceWithUsername: (NSString*) username andPassword: (NSString*) password {
		return [[[SDZCollabNetSoapService alloc] initWithUsername:username andPassword:password] autorelease];
	}

		
	/* Returns NSString*.  */
	- (SoapRequest*) getVersion: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self getVersion: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) getVersion: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getVersion" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) setUserData: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId userData: (SDZUserSoapDO*) userData
	{
		return [self setUserData: handler action: nil sessionId: sessionId userData: userData];
	}

	- (SoapRequest*) setUserData: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId userData: (SDZUserSoapDO*) userData
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: userData forName: @"userData"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"setUserData" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns BOOL.  */
	- (SoapRequest*) hasPermission: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId username: (NSString*) username projectId: (NSString*) projectId operationString: (NSString*) operationString objectId: (NSString*) objectId
	{
		return [self hasPermission: handler action: nil sessionId: sessionId username: username projectId: projectId operationString: operationString objectId: objectId];
	}

	- (SoapRequest*) hasPermission: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId username: (NSString*) username projectId: (NSString*) projectId operationString: (NSString*) operationString objectId: (NSString*) objectId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: username forName: @"username"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: operationString forName: @"operationString"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: objectId forName: @"objectId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"hasPermission" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"BOOL"];
		[_request send];
		return _request;
	}

	/* Returns SDZUserSoapDO*.  */
	- (SoapRequest*) getUserData: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId username: (NSString*) username
	{
		return [self getUserData: handler action: nil sessionId: sessionId username: username];
	}

	- (SoapRequest*) getUserData: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId username: (NSString*) username
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: username forName: @"username"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getUserData" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZUserSoapDO alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) keepAlive: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self keepAlive: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) keepAlive: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"keepAlive" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) login: (id <SoapDelegate>) handler userName: (NSString*) userName password: (NSString*) password
	{
		return [self login: handler action: nil userName: userName password: password];
	}

	- (SoapRequest*) login: (id) _target action: (SEL) _action userName: (NSString*) userName password: (NSString*) password
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: userName forName: @"userName"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: password forName: @"password"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"login" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getSessionId: (id <SoapDelegate>) handler oneTimeToken: (NSString*) oneTimeToken
	{
		return [self getSessionId: handler action: nil oneTimeToken: oneTimeToken];
	}

	- (SoapRequest*) getSessionId: (id) _target action: (SEL) _action oneTimeToken: (NSString*) oneTimeToken
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: oneTimeToken forName: @"oneTimeToken"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getSessionId" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getConfigurationValue: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId keyValue: (NSString*) keyValue
	{
		return [self getConfigurationValue: handler action: nil sessionId: sessionId keyValue: keyValue];
	}

	- (SoapRequest*) getConfigurationValue: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId keyValue: (NSString*) keyValue
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: keyValue forName: @"keyValue"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getConfigurationValue" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns SDZUserSoapDO*.  */
	- (SoapRequest*) createUser: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId userName: (NSString*) userName email: (NSString*) email fullName: (NSString*) fullName organization: (NSString*) organization locale: (NSString*) locale timeZone: (NSString*) timeZone licenseType: (NSString*) licenseType isSuperUser: (BOOL) isSuperUser isRestrictedUser: (BOOL) isRestrictedUser password: (NSString*) password
	{
		return [self createUser: handler action: nil sessionId: sessionId userName: userName email: email fullName: fullName organization: organization locale: locale timeZone: timeZone licenseType: licenseType isSuperUser: isSuperUser isRestrictedUser: isRestrictedUser password: password];
	}

	- (SoapRequest*) createUser: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId userName: (NSString*) userName email: (NSString*) email fullName: (NSString*) fullName organization: (NSString*) organization locale: (NSString*) locale timeZone: (NSString*) timeZone licenseType: (NSString*) licenseType isSuperUser: (BOOL) isSuperUser isRestrictedUser: (BOOL) isRestrictedUser password: (NSString*) password
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: userName forName: @"userName"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: email forName: @"email"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: fullName forName: @"fullName"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: organization forName: @"organization"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: locale forName: @"locale"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: timeZone forName: @"timeZone"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: licenseType forName: @"licenseType"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithBool: isSuperUser] forName: @"isSuperUser"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithBool: isRestrictedUser] forName: @"isRestrictedUser"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: password forName: @"password"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"createUser" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZUserSoapDO alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns long.  */
	- (SoapRequest*) getCurrentTime: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self getCurrentTime: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) getCurrentTime: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getCurrentTime" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"long"];
		[_request send];
		return _request;
	}

	/* Returns SDZProjectSoapDO*.  */
	- (SoapRequest*) getProjectData: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectId: (NSString*) projectId
	{
		return [self getProjectData: handler action: nil sessionId: sessionId projectId: projectId];
	}

	- (SoapRequest*) getProjectData: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectId: (NSString*) projectId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getProjectData" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZProjectSoapDO alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZUserSoapDO*.  */
	- (SoapRequest*) getCurrentUserData: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self getCurrentUserData: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) getCurrentUserData: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getCurrentUserData" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZUserSoapDO alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZAttachmentSoapList*.  */
	- (SoapRequest*) listAttachments: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId objectId: (NSString*) objectId
	{
		return [self listAttachments: handler action: nil sessionId: sessionId objectId: objectId];
	}

	- (SoapRequest*) listAttachments: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId objectId: (NSString*) objectId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: objectId forName: @"objectId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"listAttachments" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZAttachmentSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) setParentProject: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectId: (NSString*) projectId parentProjectId: (NSString*) parentProjectId
	{
		return [self setParentProject: handler action: nil sessionId: sessionId projectId: projectId parentProjectId: parentProjectId];
	}

	- (SoapRequest*) setParentProject: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectId: (NSString*) projectId parentProjectId: (NSString*) parentProjectId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: parentProjectId forName: @"parentProjectId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"setParentProject" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns BOOL.  */
	- (SoapRequest*) isHostedMode: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self isHostedMode: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) isHostedMode: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"isHostedMode" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"BOOL"];
		[_request send];
		return _request;
	}

	/* Returns SDZProjectSoapDO*.  */
	- (SoapRequest*) createOrReplaceProjectTemplate: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectId: (NSString*) projectId title: (NSString*) title description: (NSString*) description contentChoices: (SDZArrayOf_xsd_string*) contentChoices templateId: (NSString*) templateId
	{
		return [self createOrReplaceProjectTemplate: handler action: nil sessionId: sessionId projectId: projectId title: title description: description contentChoices: contentChoices templateId: templateId];
	}

	- (SoapRequest*) createOrReplaceProjectTemplate: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectId: (NSString*) projectId title: (NSString*) title description: (NSString*) description contentChoices: (SDZArrayOf_xsd_string*) contentChoices templateId: (NSString*) templateId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: title forName: @"title"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: description forName: @"description"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: contentChoices forName: @"contentChoices"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: templateId forName: @"templateId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"createOrReplaceProjectTemplate" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZProjectSoapDO alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZProjectSoapDO*.  */
	- (SoapRequest*) createProjectFromTemplate: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId templateId: (NSString*) templateId name: (NSString*) name title: (NSString*) title description: (NSString*) description
	{
		return [self createProjectFromTemplate: handler action: nil sessionId: sessionId templateId: templateId name: name title: title description: description];
	}

	- (SoapRequest*) createProjectFromTemplate: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId templateId: (NSString*) templateId name: (NSString*) name title: (NSString*) title description: (NSString*) description
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: templateId forName: @"templateId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: name forName: @"name"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: title forName: @"title"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: description forName: @"description"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"createProjectFromTemplate" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZProjectSoapDO alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZProjectSoapList*.  */
	- (SoapRequest*) listTemplates: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self listTemplates: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) listTemplates: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"listTemplates" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZProjectSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) deleteProject: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectId: (NSString*) projectId noNotification: (BOOL) noNotification forceDeleteEvenIfChildFound: (BOOL) forceDeleteEvenIfChildFound
	{
		return [self deleteProject: handler action: nil sessionId: sessionId projectId: projectId noNotification: noNotification forceDeleteEvenIfChildFound: forceDeleteEvenIfChildFound];
	}

	- (SoapRequest*) deleteProject: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectId: (NSString*) projectId noNotification: (BOOL) noNotification forceDeleteEvenIfChildFound: (BOOL) forceDeleteEvenIfChildFound
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithBool: noNotification] forName: @"noNotification"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithBool: forceDeleteEvenIfChildFound] forName: @"forceDeleteEvenIfChildFound"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"deleteProject" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns SDZUserSoapList*.  */
	- (SoapRequest*) getUserList: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId soapFilter: (SDZSoapFilter*) soapFilter
	{
		return [self getUserList: handler action: nil sessionId: sessionId soapFilter: soapFilter];
	}

	- (SoapRequest*) getUserList: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId soapFilter: (SDZSoapFilter*) soapFilter
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: soapFilter forName: @"soapFilter"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getUserList" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZUserSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZProjectGroupSoapDO*.  */
	- (SoapRequest*) createProjectGroup: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId title: (NSString*) title description: (NSString*) description
	{
		return [self createProjectGroup: handler action: nil sessionId: sessionId title: title description: description];
	}

	- (SoapRequest*) createProjectGroup: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId title: (NSString*) title description: (NSString*) description
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: title forName: @"title"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: description forName: @"description"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"createProjectGroup" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZProjectGroupSoapDO alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZProjectGroupSoapList*.  */
	- (SoapRequest*) listProjectGroups: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self listProjectGroups: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) listProjectGroups: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"listProjectGroups" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZProjectGroupSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZProjectSoapList*.  */
	- (SoapRequest*) getMemberProjectsForProjectGroup: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectGroupId: (NSString*) projectGroupId
	{
		return [self getMemberProjectsForProjectGroup: handler action: nil sessionId: sessionId projectGroupId: projectGroupId];
	}

	- (SoapRequest*) getMemberProjectsForProjectGroup: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectGroupId: (NSString*) projectGroupId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectGroupId forName: @"projectGroupId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getMemberProjectsForProjectGroup" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZProjectSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) removeProjectsFromProjectGroup: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectMemberIds: (SDZArrayOf_xsd_string*) projectMemberIds projectGroupId: (NSString*) projectGroupId
	{
		return [self removeProjectsFromProjectGroup: handler action: nil sessionId: sessionId projectMemberIds: projectMemberIds projectGroupId: projectGroupId];
	}

	- (SoapRequest*) removeProjectsFromProjectGroup: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectMemberIds: (SDZArrayOf_xsd_string*) projectMemberIds projectGroupId: (NSString*) projectGroupId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectMemberIds forName: @"projectMemberIds"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectGroupId forName: @"projectGroupId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"removeProjectsFromProjectGroup" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns SDZProjectGroupSoapList*.  */
	- (SoapRequest*) getProjectGroupsForProject: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectId: (NSString*) projectId
	{
		return [self getProjectGroupsForProject: handler action: nil sessionId: sessionId projectId: projectId];
	}

	- (SoapRequest*) getProjectGroupsForProject: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectId: (NSString*) projectId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getProjectGroupsForProject" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZProjectGroupSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) deleteProjectGroup: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectGroupId: (NSString*) projectGroupId forceDeleteEvenIfMemberProjectFound: (BOOL) forceDeleteEvenIfMemberProjectFound
	{
		return [self deleteProjectGroup: handler action: nil sessionId: sessionId projectGroupId: projectGroupId forceDeleteEvenIfMemberProjectFound: forceDeleteEvenIfMemberProjectFound];
	}

	- (SoapRequest*) deleteProjectGroup: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectGroupId: (NSString*) projectGroupId forceDeleteEvenIfMemberProjectFound: (BOOL) forceDeleteEvenIfMemberProjectFound
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectGroupId forName: @"projectGroupId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithBool: forceDeleteEvenIfMemberProjectFound] forName: @"forceDeleteEvenIfMemberProjectFound"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"deleteProjectGroup" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns BOOL.  */
	- (SoapRequest*) hasGeneralPermission: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId username: (NSString*) username projectId: (NSString*) projectId operationString: (NSString*) operationString objectId: (NSString*) objectId
	{
		return [self hasGeneralPermission: handler action: nil sessionId: sessionId username: username projectId: projectId operationString: operationString objectId: objectId];
	}

	- (SoapRequest*) hasGeneralPermission: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId username: (NSString*) username projectId: (NSString*) projectId operationString: (NSString*) operationString objectId: (NSString*) objectId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: username forName: @"username"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: operationString forName: @"operationString"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: objectId forName: @"objectId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"hasGeneralPermission" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"BOOL"];
		[_request send];
		return _request;
	}

	/* Returns int.  */
	- (SoapRequest*) getProjectAccessLevel: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectId: (NSString*) projectId
	{
		return [self getProjectAccessLevel: handler action: nil sessionId: sessionId projectId: projectId];
	}

	- (SoapRequest*) getProjectAccessLevel: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectId: (NSString*) projectId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getProjectAccessLevel" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"int"];
		[_request send];
		return _request;
	}

	/* Returns SDZProjectSoapList*.  */
	- (SoapRequest*) getProjectList: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId fetchHierarchyPath: (BOOL) fetchHierarchyPath
	{
		return [self getProjectList: handler action: nil sessionId: sessionId fetchHierarchyPath: fetchHierarchyPath];
	}

	- (SoapRequest*) getProjectList: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId fetchHierarchyPath: (BOOL) fetchHierarchyPath
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithBool: fetchHierarchyPath] forName: @"fetchHierarchyPath"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getProjectList" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZProjectSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZUserSoapList*.  */
	- (SoapRequest*) listUsersWithPermissionOnObject: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId operationString: (NSString*) operationString objectId: (NSString*) objectId flag: (int) flag
	{
		return [self listUsersWithPermissionOnObject: handler action: nil sessionId: sessionId operationString: operationString objectId: objectId flag: flag];
	}

	- (SoapRequest*) listUsersWithPermissionOnObject: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId operationString: (NSString*) operationString objectId: (NSString*) objectId flag: (int) flag
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: operationString forName: @"operationString"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: objectId forName: @"objectId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithInt: flag] forName: @"flag"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"listUsersWithPermissionOnObject" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZUserSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZProjectSoapDO*.  */
	- (SoapRequest*) createProject: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId name: (NSString*) name title: (NSString*) title description: (NSString*) description
	{
		return [self createProject: handler action: nil sessionId: sessionId name: name title: title description: description];
	}

	- (SoapRequest*) createProject: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId name: (NSString*) name title: (NSString*) title description: (NSString*) description
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: name forName: @"name"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: title forName: @"title"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: description forName: @"description"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"createProject" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZProjectSoapDO alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) deleteAttachment: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId objectId: (NSString*) objectId attachmentId: (NSString*) attachmentId
	{
		return [self deleteAttachment: handler action: nil sessionId: sessionId objectId: objectId attachmentId: attachmentId];
	}

	- (SoapRequest*) deleteAttachment: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId objectId: (NSString*) objectId attachmentId: (NSString*) attachmentId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: objectId forName: @"objectId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: attachmentId forName: @"attachmentId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"deleteAttachment" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns long.  */
	- (SoapRequest*) getProjectDiskUsage: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectId: (NSString*) projectId
	{
		return [self getProjectDiskUsage: handler action: nil sessionId: sessionId projectId: projectId];
	}

	- (SoapRequest*) getProjectDiskUsage: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectId: (NSString*) projectId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getProjectDiskUsage" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"long"];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) addProjectMember: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectId: (NSString*) projectId userName: (NSString*) userName
	{
		return [self addProjectMember: handler action: nil sessionId: sessionId projectId: projectId userName: userName];
	}

	- (SoapRequest*) addProjectMember: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectId: (NSString*) projectId userName: (NSString*) userName
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: userName forName: @"userName"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"addProjectMember" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) removeProjectMember: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectId: (NSString*) projectId userName: (NSString*) userName
	{
		return [self removeProjectMember: handler action: nil sessionId: sessionId projectId: projectId userName: userName];
	}

	- (SoapRequest*) removeProjectMember: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectId: (NSString*) projectId userName: (NSString*) userName
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: userName forName: @"userName"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"removeProjectMember" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns SDZVersionInformationSoapList*.  */
	- (SoapRequest*) getVersionInformationList: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId folderId: (NSString*) folderId
	{
		return [self getVersionInformationList: handler action: nil sessionId: sessionId folderId: folderId];
	}

	- (SoapRequest*) getVersionInformationList: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId folderId: (NSString*) folderId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: folderId forName: @"folderId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getVersionInformationList" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZVersionInformationSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZProjectSoapList*.  */
	- (SoapRequest*) getSubprojectList: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectId: (NSString*) projectId fetchHierarchyPath: (BOOL) fetchHierarchyPath
	{
		return [self getSubprojectList: handler action: nil sessionId: sessionId projectId: projectId fetchHierarchyPath: fetchHierarchyPath];
	}

	- (SoapRequest*) getSubprojectList: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectId: (NSString*) projectId fetchHierarchyPath: (BOOL) fetchHierarchyPath
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithBool: fetchHierarchyPath] forName: @"fetchHierarchyPath"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getSubprojectList" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZProjectSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) setProjectQuota: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectId: (NSString*) projectId quota: (long) quota
	{
		return [self setProjectQuota: handler action: nil sessionId: sessionId projectId: projectId quota: quota];
	}

	- (SoapRequest*) setProjectQuota: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectId: (NSString*) projectId quota: (long) quota
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithLong: quota] forName: @"quota"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"setProjectQuota" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns long.  */
	- (SoapRequest*) getProjectQuota: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectId: (NSString*) projectId
	{
		return [self getProjectQuota: handler action: nil sessionId: sessionId projectId: projectId];
	}

	- (SoapRequest*) getProjectQuota: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectId: (NSString*) projectId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getProjectQuota" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"long"];
		[_request send];
		return _request;
	}

	/* Returns SDZProjectSoapList*.  */
	- (SoapRequest*) getProjectListForUser: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId username: (NSString*) username fetchHierarchyPath: (BOOL) fetchHierarchyPath includeGroupMembership: (BOOL) includeGroupMembership
	{
		return [self getProjectListForUser: handler action: nil sessionId: sessionId username: username fetchHierarchyPath: fetchHierarchyPath includeGroupMembership: includeGroupMembership];
	}

	- (SoapRequest*) getProjectListForUser: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId username: (NSString*) username fetchHierarchyPath: (BOOL) fetchHierarchyPath includeGroupMembership: (BOOL) includeGroupMembership
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: username forName: @"username"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithBool: fetchHierarchyPath] forName: @"fetchHierarchyPath"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithBool: includeGroupMembership] forName: @"includeGroupMembership"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getProjectListForUser" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZProjectSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getJSessionId: (id <SoapDelegate>) handler oneTimeToken: (NSString*) oneTimeToken
	{
		return [self getJSessionId: handler action: nil oneTimeToken: oneTimeToken];
	}

	- (SoapRequest*) getJSessionId: (id) _target action: (SEL) _action oneTimeToken: (NSString*) oneTimeToken
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: oneTimeToken forName: @"oneTimeToken"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getJSessionId" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns SDZUserGroupSoapList*.  */
	- (SoapRequest*) listGroupsWithGeneralPermission: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectId: (NSString*) projectId operationString: (NSString*) operationString folderId: (NSString*) folderId includeInherited: (BOOL) includeInherited
	{
		return [self listGroupsWithGeneralPermission: handler action: nil sessionId: sessionId projectId: projectId operationString: operationString folderId: folderId includeInherited: includeInherited];
	}

	- (SoapRequest*) listGroupsWithGeneralPermission: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectId: (NSString*) projectId operationString: (NSString*) operationString folderId: (NSString*) folderId includeInherited: (BOOL) includeInherited
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: operationString forName: @"operationString"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: folderId forName: @"folderId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithBool: includeInherited] forName: @"includeInherited"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"listGroupsWithGeneralPermission" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZUserGroupSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZUserSoapList*.  */
	- (SoapRequest*) findUsers: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId queryString: (NSString*) queryString
	{
		return [self findUsers: handler action: nil sessionId: sessionId queryString: queryString];
	}

	- (SoapRequest*) findUsers: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId queryString: (NSString*) queryString
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: queryString forName: @"queryString"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"findUsers" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZUserSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) setProjectAccessLevel: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectId: (NSString*) projectId accessLevel: (int) accessLevel
	{
		return [self setProjectAccessLevel: handler action: nil sessionId: sessionId projectId: projectId accessLevel: accessLevel];
	}

	- (SoapRequest*) setProjectAccessLevel: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectId: (NSString*) projectId accessLevel: (int) accessLevel
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithInt: accessLevel] forName: @"accessLevel"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"setProjectAccessLevel" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns BOOL.  */
	- (SoapRequest*) changePassword: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId userName: (NSString*) userName newPassword: (NSString*) newPassword
	{
		return [self changePassword: handler action: nil sessionId: sessionId userName: userName newPassword: newPassword];
	}

	- (SoapRequest*) changePassword: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId userName: (NSString*) userName newPassword: (NSString*) newPassword
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: userName forName: @"userName"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: newPassword forName: @"newPassword"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"changePassword" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"BOOL"];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) logoff: (id <SoapDelegate>) handler userName: (NSString*) userName sessionId: (NSString*) sessionId
	{
		return [self logoff: handler action: nil userName: userName sessionId: sessionId];
	}

	- (SoapRequest*) logoff: (id) _target action: (SEL) _action userName: (NSString*) userName sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: userName forName: @"userName"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"logoff" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) loginWithToken: (id <SoapDelegate>) handler username: (NSString*) username oneTimeToken: (NSString*) oneTimeToken
	{
		return [self loginWithToken: handler action: nil username: username oneTimeToken: oneTimeToken];
	}

	- (SoapRequest*) loginWithToken: (id) _target action: (SEL) _action username: (NSString*) username oneTimeToken: (NSString*) oneTimeToken
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: username forName: @"username"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: oneTimeToken forName: @"oneTimeToken"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"loginWithToken" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getApiVersion: (id <SoapDelegate>) handler
	{
		return [self getApiVersion: handler action: nil];
	}

	- (SoapRequest*) getApiVersion: (id) _target action: (SEL) _action
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		NSString* _envelope = [Soap createEnvelope: @"getApiVersion" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns SDZProjectSoapList*.  */
	- (SoapRequest*) findProjects: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId queryString: (NSString*) queryString
	{
		return [self findProjects: handler action: nil sessionId: sessionId queryString: queryString];
	}

	- (SoapRequest*) findProjects: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId queryString: (NSString*) queryString
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: queryString forName: @"queryString"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"findProjects" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZProjectSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZProjectMemberSoapList*.  */
	- (SoapRequest*) getProjectMemberList: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectId: (NSString*) projectId
	{
		return [self getProjectMemberList: handler action: nil sessionId: sessionId projectId: projectId];
	}

	- (SoapRequest*) getProjectMemberList: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectId: (NSString*) projectId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getProjectMemberList" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZProjectMemberSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZCommentSoapList*.  */
	- (SoapRequest*) getCommentList: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId objectId: (NSString*) objectId
	{
		return [self getCommentList: handler action: nil sessionId: sessionId objectId: objectId];
	}

	- (SoapRequest*) getCommentList: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId objectId: (NSString*) objectId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: objectId forName: @"objectId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getCommentList" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZCommentSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) createAssociation: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId originId: (NSString*) originId targetId: (NSString*) targetId description: (NSString*) description
	{
		return [self createAssociation: handler action: nil sessionId: sessionId originId: originId targetId: targetId description: description];
	}

	- (SoapRequest*) createAssociation: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId originId: (NSString*) originId targetId: (NSString*) targetId description: (NSString*) description
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: originId forName: @"originId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: targetId forName: @"targetId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: description forName: @"description"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"createAssociation" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) deleteAssociation: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId originId: (NSString*) originId targetId: (NSString*) targetId
	{
		return [self deleteAssociation: handler action: nil sessionId: sessionId originId: originId targetId: targetId];
	}

	- (SoapRequest*) deleteAssociation: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId originId: (NSString*) originId targetId: (NSString*) targetId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: originId forName: @"originId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: targetId forName: @"targetId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"deleteAssociation" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns SDZAssociationSoapList*.  */
	- (SoapRequest*) getAssociationList: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId objectId: (NSString*) objectId
	{
		return [self getAssociationList: handler action: nil sessionId: sessionId objectId: objectId];
	}

	- (SoapRequest*) getAssociationList: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId objectId: (NSString*) objectId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: objectId forName: @"objectId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getAssociationList" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZAssociationSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZAuditHistorySoapList*.  */
	- (SoapRequest*) getAuditHistoryList: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId objectId: (NSString*) objectId includeDerivedChanges: (BOOL) includeDerivedChanges
	{
		return [self getAuditHistoryList: handler action: nil sessionId: sessionId objectId: objectId includeDerivedChanges: includeDerivedChanges];
	}

	- (SoapRequest*) getAuditHistoryList: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId objectId: (NSString*) objectId includeDerivedChanges: (BOOL) includeDerivedChanges
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: objectId forName: @"objectId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: [NSNumber numberWithBool: includeDerivedChanges] forName: @"includeDerivedChanges"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getAuditHistoryList" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZAuditHistorySoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) reindexObject: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId objectId: (NSString*) objectId
	{
		return [self reindexObject: handler action: nil sessionId: sessionId objectId: objectId];
	}

	- (SoapRequest*) reindexObject: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId objectId: (NSString*) objectId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: objectId forName: @"objectId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"reindexObject" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) loginAnonymous: (id <SoapDelegate>) handler anonSharedSecret: (NSString*) anonSharedSecret
	{
		return [self loginAnonymous: handler action: nil anonSharedSecret: anonSharedSecret];
	}

	- (SoapRequest*) loginAnonymous: (id) _target action: (SEL) _action anonSharedSecret: (NSString*) anonSharedSecret
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: anonSharedSecret forName: @"anonSharedSecret"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"loginAnonymous" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns SDZUserGroupSoapList*.  */
	- (SoapRequest*) getUserGroupList: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self getUserGroupList: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) getUserGroupList: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getUserGroupList" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZUserGroupSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) doMandatoryPasswordChange: (id <SoapDelegate>) handler userName: (NSString*) userName oldPassword: (NSString*) oldPassword newPassword: (NSString*) newPassword
	{
		return [self doMandatoryPasswordChange: handler action: nil userName: userName oldPassword: oldPassword newPassword: newPassword];
	}

	- (SoapRequest*) doMandatoryPasswordChange: (id) _target action: (SEL) _action userName: (NSString*) userName oldPassword: (NSString*) oldPassword newPassword: (NSString*) newPassword
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: userName forName: @"userName"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: oldPassword forName: @"oldPassword"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: newPassword forName: @"newPassword"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"doMandatoryPasswordChange" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns SDZProjectSoapDO*.  */
	- (SoapRequest*) lockProject: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectId: (NSString*) projectId
	{
		return [self lockProject: handler action: nil sessionId: sessionId projectId: projectId];
	}

	- (SoapRequest*) lockProject: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectId: (NSString*) projectId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"lockProject" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZProjectSoapDO alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZProjectSoapDO*.  */
	- (SoapRequest*) unLockProject: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectId: (NSString*) projectId
	{
		return [self unLockProject: handler action: nil sessionId: sessionId projectId: projectId];
	}

	- (SoapRequest*) unLockProject: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectId: (NSString*) projectId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"unLockProject" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZProjectSoapDO alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZUserSoapList*.  */
	- (SoapRequest*) listProjectAdmins: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectId: (NSString*) projectId
	{
		return [self listProjectAdmins: handler action: nil sessionId: sessionId projectId: projectId];
	}

	- (SoapRequest*) listProjectAdmins: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectId: (NSString*) projectId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"listProjectAdmins" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZUserSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) addProjectGroupMember: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectGroupId: (NSString*) projectGroupId userName: (NSString*) userName
	{
		return [self addProjectGroupMember: handler action: nil sessionId: sessionId projectGroupId: projectGroupId userName: userName];
	}

	- (SoapRequest*) addProjectGroupMember: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectGroupId: (NSString*) projectGroupId userName: (NSString*) userName
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectGroupId forName: @"projectGroupId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: userName forName: @"userName"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"addProjectGroupMember" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns SDZUserSoapDO*.  */
	- (SoapRequest*) getUserByEmail: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId email: (NSString*) email
	{
		return [self getUserByEmail: handler action: nil sessionId: sessionId email: email];
	}

	- (SoapRequest*) getUserByEmail: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId email: (NSString*) email
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: email forName: @"email"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getUserByEmail" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZUserSoapDO alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZUserSoapDO*.  */
	- (SoapRequest*) getUserByName: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId fullname: (NSString*) fullname
	{
		return [self getUserByName: handler action: nil sessionId: sessionId fullname: fullname];
	}

	- (SoapRequest*) getUserByName: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId fullname: (NSString*) fullname
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: fullname forName: @"fullname"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getUserByName" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZUserSoapDO alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getUserEffectiveMode: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self getUserEffectiveMode: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) getUserEffectiveMode: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getUserEffectiveMode" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns SDZProjectSoapDO*.  */
	- (SoapRequest*) getProjectByPath: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectPath: (NSString*) projectPath
	{
		return [self getProjectByPath: handler action: nil sessionId: sessionId projectPath: projectPath];
	}

	- (SoapRequest*) getProjectByPath: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectPath: (NSString*) projectPath
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectPath forName: @"projectPath"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getProjectByPath" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZProjectSoapDO alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZUserSoapList*.  */
	- (SoapRequest*) listUsersWithGeneralPermission: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectId: (NSString*) projectId operationString: (NSString*) operationString folderId: (NSString*) folderId
	{
		return [self listUsersWithGeneralPermission: handler action: nil sessionId: sessionId projectId: projectId operationString: operationString folderId: folderId];
	}

	- (SoapRequest*) listUsersWithGeneralPermission: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectId: (NSString*) projectId operationString: (NSString*) operationString folderId: (NSString*) folderId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectId forName: @"projectId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: operationString forName: @"operationString"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: folderId forName: @"folderId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"listUsersWithGeneralPermission" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZUserSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZSoapNamedValues*.  */
	- (SoapRequest*) getProjectHierarchyPaths: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectIds: (SDZArrayOf_xsd_string*) projectIds
	{
		return [self getProjectHierarchyPaths: handler action: nil sessionId: sessionId projectIds: projectIds];
	}

	- (SoapRequest*) getProjectHierarchyPaths: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectIds: (SDZArrayOf_xsd_string*) projectIds
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectIds forName: @"projectIds"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getProjectHierarchyPaths" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZSoapNamedValues alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns BOOL.  */
	- (SoapRequest*) canReceiveOwnUpdates: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self canReceiveOwnUpdates: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) canReceiveOwnUpdates: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"canReceiveOwnUpdates" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"BOOL"];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) addProjectsToProjectGroup: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectGroupId: (NSString*) projectGroupId projectIds: (SDZArrayOf_xsd_string*) projectIds
	{
		return [self addProjectsToProjectGroup: handler action: nil sessionId: sessionId projectGroupId: projectGroupId projectIds: projectIds];
	}

	- (SoapRequest*) addProjectsToProjectGroup: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectGroupId: (NSString*) projectGroupId projectIds: (SDZArrayOf_xsd_string*) projectIds
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectGroupId forName: @"projectGroupId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectIds forName: @"projectIds"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"addProjectsToProjectGroup" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns SDZProjectGroupSoapDO*.  */
	- (SoapRequest*) getProjectGroupData: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectGroupId: (NSString*) projectGroupId
	{
		return [self getProjectGroupData: handler action: nil sessionId: sessionId projectGroupId: projectGroupId];
	}

	- (SoapRequest*) getProjectGroupData: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectGroupId: (NSString*) projectGroupId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectGroupId forName: @"projectGroupId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getProjectGroupData" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZProjectGroupSoapDO alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) setProjectGroupData: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectGroupData: (SDZProjectGroupSoapDO*) projectGroupData
	{
		return [self setProjectGroupData: handler action: nil sessionId: sessionId projectGroupData: projectGroupData];
	}

	- (SoapRequest*) setProjectGroupData: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectGroupData: (SDZProjectGroupSoapDO*) projectGroupData
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectGroupData forName: @"projectGroupData"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"setProjectGroupData" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) addProjectGroupAdmins: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectGroupId: (NSString*) projectGroupId usernames: (SDZArrayOf_xsd_string*) usernames
	{
		return [self addProjectGroupAdmins: handler action: nil sessionId: sessionId projectGroupId: projectGroupId usernames: usernames];
	}

	- (SoapRequest*) addProjectGroupAdmins: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectGroupId: (NSString*) projectGroupId usernames: (SDZArrayOf_xsd_string*) usernames
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectGroupId forName: @"projectGroupId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: usernames forName: @"usernames"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"addProjectGroupAdmins" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) removeProjectGroupAdmins: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectGroupId: (NSString*) projectGroupId usernames: (SDZArrayOf_xsd_string*) usernames
	{
		return [self removeProjectGroupAdmins: handler action: nil sessionId: sessionId projectGroupId: projectGroupId usernames: usernames];
	}

	- (SoapRequest*) removeProjectGroupAdmins: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectGroupId: (NSString*) projectGroupId usernames: (SDZArrayOf_xsd_string*) usernames
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectGroupId forName: @"projectGroupId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: usernames forName: @"usernames"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"removeProjectGroupAdmins" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) removeProjectGroupMember: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectGroupId: (NSString*) projectGroupId userName: (NSString*) userName
	{
		return [self removeProjectGroupMember: handler action: nil sessionId: sessionId projectGroupId: projectGroupId userName: userName];
	}

	- (SoapRequest*) removeProjectGroupMember: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectGroupId: (NSString*) projectGroupId userName: (NSString*) userName
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectGroupId forName: @"projectGroupId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: userName forName: @"userName"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"removeProjectGroupMember" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns SDZProjectGroupMemberSoapList*.  */
	- (SoapRequest*) getProjectGroupMemberList: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectGroupId: (NSString*) projectGroupId
	{
		return [self getProjectGroupMemberList: handler action: nil sessionId: sessionId projectGroupId: projectGroupId];
	}

	- (SoapRequest*) getProjectGroupMemberList: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectGroupId: (NSString*) projectGroupId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectGroupId forName: @"projectGroupId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getProjectGroupMemberList" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZProjectGroupMemberSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getWebAndSoapSessionId: (id <SoapDelegate>) handler oneTimeToken: (NSString*) oneTimeToken
	{
		return [self getWebAndSoapSessionId: handler action: nil oneTimeToken: oneTimeToken];
	}

	- (SoapRequest*) getWebAndSoapSessionId: (id) _target action: (SEL) _action oneTimeToken: (NSString*) oneTimeToken
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: oneTimeToken forName: @"oneTimeToken"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getWebAndSoapSessionId" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getJSessionBySoapId: (id <SoapDelegate>) handler soapId: (NSString*) soapId
	{
		return [self getJSessionBySoapId: handler action: nil soapId: soapId];
	}

	- (SoapRequest*) getJSessionBySoapId: (id) _target action: (SEL) _action soapId: (NSString*) soapId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: soapId forName: @"soapId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getJSessionBySoapId" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns SDZUserGroupSoapList*.  */
	- (SoapRequest*) getUserGroupListForProject: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId projectOrProjectGroupId: (NSString*) projectOrProjectGroupId
	{
		return [self getUserGroupListForProject: handler action: nil sessionId: sessionId projectOrProjectGroupId: projectOrProjectGroupId];
	}

	- (SoapRequest*) getUserGroupListForProject: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId projectOrProjectGroupId: (NSString*) projectOrProjectGroupId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: projectOrProjectGroupId forName: @"projectOrProjectGroupId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getUserGroupListForProject" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZUserGroupSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZUserGroupSoapDO*.  */
	- (SoapRequest*) createUserGroup: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId fullName: (NSString*) fullName description: (NSString*) description
	{
		return [self createUserGroup: handler action: nil sessionId: sessionId fullName: fullName description: description];
	}

	- (SoapRequest*) createUserGroup: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId fullName: (NSString*) fullName description: (NSString*) description
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: fullName forName: @"fullName"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: description forName: @"description"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"createUserGroup" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZUserGroupSoapDO alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZUserGroupSoapDO*.  */
	- (SoapRequest*) getUserGroupData: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId groupId: (NSString*) groupId
	{
		return [self getUserGroupData: handler action: nil sessionId: sessionId groupId: groupId];
	}

	- (SoapRequest*) getUserGroupData: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId groupId: (NSString*) groupId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: groupId forName: @"groupId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getUserGroupData" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZUserGroupSoapDO alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) setUserGroupData: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId groupData: (SDZUserGroupSoapDO*) groupData
	{
		return [self setUserGroupData: handler action: nil sessionId: sessionId groupData: groupData];
	}

	- (SoapRequest*) setUserGroupData: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId groupData: (SDZUserGroupSoapDO*) groupData
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: groupData forName: @"groupData"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"setUserGroupData" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) deleteUserGroup: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId groupId: (NSString*) groupId
	{
		return [self deleteUserGroup: handler action: nil sessionId: sessionId groupId: groupId];
	}

	- (SoapRequest*) deleteUserGroup: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId groupId: (NSString*) groupId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: groupId forName: @"groupId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"deleteUserGroup" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns SDZUserGroupSoapList*.  */
	- (SoapRequest*) getUserGroupListForUser: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId username: (NSString*) username
	{
		return [self getUserGroupListForUser: handler action: nil sessionId: sessionId username: username];
	}

	- (SoapRequest*) getUserGroupListForUser: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId username: (NSString*) username
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: username forName: @"username"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getUserGroupListForUser" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZUserGroupSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns SDZUserSoapList*.  */
	- (SoapRequest*) getUserGroupMembers: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId groupId: (NSString*) groupId
	{
		return [self getUserGroupMembers: handler action: nil sessionId: sessionId groupId: groupId];
	}

	- (SoapRequest*) getUserGroupMembers: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId groupId: (NSString*) groupId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: groupId forName: @"groupId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getUserGroupMembers" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: [[SDZUserSoapList alloc] autorelease]];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) addUserGroupMember: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId userGroupId: (NSString*) userGroupId userName: (NSString*) userName
	{
		return [self addUserGroupMember: handler action: nil sessionId: sessionId userGroupId: userGroupId userName: userName];
	}

	- (SoapRequest*) addUserGroupMember: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId userGroupId: (NSString*) userGroupId userName: (NSString*) userName
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: userGroupId forName: @"userGroupId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: userName forName: @"userName"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"addUserGroupMember" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns .  */
	- (SoapRequest*) removeUserGroupMember: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId userGroupId: (NSString*) userGroupId userName: (NSString*) userName
	{
		return [self removeUserGroupMember: handler action: nil sessionId: sessionId userGroupId: userGroupId userName: userName];
	}

	- (SoapRequest*) removeUserGroupMember: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId userGroupId: (NSString*) userGroupId userName: (NSString*) userName
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: userGroupId forName: @"userGroupId"] autorelease]];
		[_params addObject: [[[SoapParameter alloc] initWithValue: userName forName: @"userName"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"removeUserGroupMember" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @""];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getBroadCastMessage: (id <SoapDelegate>) handler sessionId: (NSString*) sessionId
	{
		return [self getBroadCastMessage: handler action: nil sessionId: sessionId];
	}

	- (SoapRequest*) getBroadCastMessage: (id) _target action: (SEL) _action sessionId: (NSString*) sessionId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: sessionId forName: @"sessionId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getBroadCastMessage" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}

	/* Returns NSString*.  */
	- (SoapRequest*) getUserSessionBySoapId: (id <SoapDelegate>) handler soapId: (NSString*) soapId
	{
		return [self getUserSessionBySoapId: handler action: nil soapId: soapId];
	}

	- (SoapRequest*) getUserSessionBySoapId: (id) _target action: (SEL) _action soapId: (NSString*) soapId
		{
		NSMutableArray* _params = [NSMutableArray array];
		
		[_params addObject: [[[SoapParameter alloc] initWithValue: soapId forName: @"soapId"] autorelease]];
		NSString* _envelope = [Soap createEnvelope: @"getUserSessionBySoapId" forNamespace: self.namespace withParameters: _params withHeaders: self.headers];
		SoapRequest* _request = [SoapRequest create: _target action: _action service: self soapAction: @"" postData: _envelope deserializeTo: @"NSString"];
		[_request send];
		return _request;
	}


@end
	