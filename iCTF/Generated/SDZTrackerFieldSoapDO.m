/*
	SDZTrackerFieldSoapDO.h
	The implementation of properties and methods for the SDZTrackerFieldSoapDO object.
	Generated by SudzC.com
*/
#import "SDZTrackerFieldSoapDO.h"

#import "SDZArrayOf_xsd_string.h"
#import "SDZArrayOf_tns1_TrackerFieldValueSoapDO.h"
#import "SDZSoapNamedValues.h"
@implementation SDZTrackerFieldSoapDO
	@synthesize defaultTextValue = _defaultTextValue;
	@synthesize defaultUsernames = _defaultUsernames;
	@synthesize disabled = _disabled;
	@synthesize displayLines = _displayLines;
	@synthesize displaySize = _displaySize;
	@synthesize fieldType = _fieldType;
	@synthesize fieldValues = _fieldValues;
	@synthesize helpText = _helpText;
	@synthesize hiddenOnCreate = _hiddenOnCreate;
	@synthesize name = _name;
	@synthesize parentChildFieldValueMap = _parentChildFieldValueMap;
	@synthesize parentFieldId = _parentFieldId;
	@synthesize pattern = _pattern;
	@synthesize required = _required;
	@synthesize userFilter = _userFilter;
	@synthesize valueType = _valueType;

	- (id) init
	{
		if(self = [super init])
		{
			self.defaultTextValue = nil;
			self.defaultUsernames = nil; // [[SDZArrayOf_xsd_string alloc] init];
			self.fieldType = nil;
			self.fieldValues = nil; // [[SDZArrayOf_tns1_TrackerFieldValueSoapDO alloc] init];
			self.helpText = nil;
			self.name = nil;
			self.parentChildFieldValueMap = nil; // [[SDZSoapNamedValues alloc] init];
			self.parentFieldId = nil;
			self.pattern = nil;
			self.userFilter = nil;
			self.valueType = nil;

		}
		return self;
	}

	+ (SDZTrackerFieldSoapDO*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (SDZTrackerFieldSoapDO*)[[[SDZTrackerFieldSoapDO alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.defaultTextValue = [Soap getNodeValue: node withName: @"defaultTextValue"];
			self.defaultUsernames = [[SDZArrayOf_xsd_string newWithNode: [Soap getNode: node withName: @"defaultUsernames"]] object];
			self.disabled = [[Soap getNodeValue: node withName: @"disabled"] boolValue];
			self.displayLines = [[Soap getNodeValue: node withName: @"displayLines"] intValue];
			self.displaySize = [[Soap getNodeValue: node withName: @"displaySize"] intValue];
			self.fieldType = [Soap getNodeValue: node withName: @"fieldType"];
			self.fieldValues = [[SDZArrayOf_tns1_TrackerFieldValueSoapDO newWithNode: [Soap getNode: node withName: @"fieldValues"]] object];
			self.helpText = [Soap getNodeValue: node withName: @"helpText"];
			self.hiddenOnCreate = [[Soap getNodeValue: node withName: @"hiddenOnCreate"] boolValue];
			self.name = [Soap getNodeValue: node withName: @"name"];
			self.parentChildFieldValueMap = [[SDZSoapNamedValues newWithNode: [Soap getNode: node withName: @"parentChildFieldValueMap"]] object];
			self.parentFieldId = [Soap getNodeValue: node withName: @"parentFieldId"];
			self.pattern = [Soap getNodeValue: node withName: @"pattern"];
			self.required = [[Soap getNodeValue: node withName: @"required"] boolValue];
			self.userFilter = [Soap getNodeValue: node withName: @"userFilter"];
			self.valueType = [Soap getNodeValue: node withName: @"valueType"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"TrackerFieldSoapDO"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.defaultTextValue != nil) [s appendFormat: @"<defaultTextValue>%@</defaultTextValue>", [[self.defaultTextValue stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.defaultUsernames != nil) [s appendString: [self.defaultUsernames serialize: @"defaultUsernames"]];
		[s appendFormat: @"<disabled>%@</disabled>", (self.disabled)?@"true":@"false"];
		[s appendFormat: @"<displayLines>%@</displayLines>", [NSString stringWithFormat: @"%i", self.displayLines]];
		[s appendFormat: @"<displaySize>%@</displaySize>", [NSString stringWithFormat: @"%i", self.displaySize]];
		if (self.fieldType != nil) [s appendFormat: @"<fieldType>%@</fieldType>", [[self.fieldType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.fieldValues != nil) [s appendString: [self.fieldValues serialize: @"fieldValues"]];
		if (self.helpText != nil) [s appendFormat: @"<helpText>%@</helpText>", [[self.helpText stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<hiddenOnCreate>%@</hiddenOnCreate>", (self.hiddenOnCreate)?@"true":@"false"];
		if (self.name != nil) [s appendFormat: @"<name>%@</name>", [[self.name stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.parentChildFieldValueMap != nil) [s appendString: [self.parentChildFieldValueMap serialize: @"parentChildFieldValueMap"]];
		if (self.parentFieldId != nil) [s appendFormat: @"<parentFieldId>%@</parentFieldId>", [[self.parentFieldId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.pattern != nil) [s appendFormat: @"<pattern>%@</pattern>", [[self.pattern stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<required>%@</required>", (self.required)?@"true":@"false"];
		if (self.userFilter != nil) [s appendFormat: @"<userFilter>%@</userFilter>", [[self.userFilter stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.valueType != nil) [s appendFormat: @"<valueType>%@</valueType>", [[self.valueType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[SDZTrackerFieldSoapDO class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.defaultTextValue != nil) { [self.defaultTextValue release]; }
		if(self.defaultUsernames != nil) { [self.defaultUsernames release]; }
		if(self.fieldType != nil) { [self.fieldType release]; }
		if(self.fieldValues != nil) { [self.fieldValues release]; }
		if(self.helpText != nil) { [self.helpText release]; }
		if(self.name != nil) { [self.name release]; }
		if(self.parentChildFieldValueMap != nil) { [self.parentChildFieldValueMap release]; }
		if(self.parentFieldId != nil) { [self.parentFieldId release]; }
		if(self.pattern != nil) { [self.pattern release]; }
		if(self.userFilter != nil) { [self.userFilter release]; }
		if(self.valueType != nil) { [self.valueType release]; }
		[super dealloc];
	}

@end
