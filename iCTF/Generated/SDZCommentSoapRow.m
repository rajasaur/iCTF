/*
	SDZCommentSoapRow.h
	The implementation of properties and methods for the SDZCommentSoapRow object.
	Generated by SudzC.com
*/
#import "SDZCommentSoapRow.h"

@implementation SDZCommentSoapRow
	@synthesize createdBy = _createdBy;
	@synthesize createdByFullname = _createdByFullname;
	@synthesize dateCreated = _dateCreated;
	@synthesize description = _description;
	@synthesize _id = __id;
	@synthesize transactionId = _transactionId;

	- (id) init
	{
		if(self = [super init])
		{
			self.createdBy = nil;
			self.createdByFullname = nil;
			self.dateCreated = nil;
			self.description = nil;
			self._id = nil;
			self.transactionId = nil;

		}
		return self;
	}

	+ (SDZCommentSoapRow*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (SDZCommentSoapRow*)[[[SDZCommentSoapRow alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.createdBy = [Soap getNodeValue: node withName: @"createdBy"];
			self.createdByFullname = [Soap getNodeValue: node withName: @"createdByFullname"];
			self.dateCreated = [Soap dateFromString: [Soap getNodeValue: node withName: @"dateCreated"]];
			self.description = [Soap getNodeValue: node withName: @"description"];
			self._id = [Soap getNodeValue: node withName: @"id"];
			self.transactionId = [Soap getNodeValue: node withName: @"transactionId"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"CommentSoapRow"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [[NSMutableString alloc] init];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return [s autorelease];
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.createdBy != nil) [s appendFormat: @"<createdBy>%@</createdBy>", [[self.createdBy stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.createdByFullname != nil) [s appendFormat: @"<createdByFullname>%@</createdByFullname>", [[self.createdByFullname stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.dateCreated != nil) [s appendFormat: @"<dateCreated>%@</dateCreated>", [Soap getDateString: self.dateCreated]];
		if (self.description != nil) [s appendFormat: @"<description>%@</description>", [[self.description stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self._id != nil) [s appendFormat: @"<id>%@</id>", [[self._id stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.transactionId != nil) [s appendFormat: @"<transactionId>%@</transactionId>", [[self.transactionId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[SDZCommentSoapRow class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.createdBy != nil) { [self.createdBy release]; }
		if(self.createdByFullname != nil) { [self.createdByFullname release]; }
		if(self.dateCreated != nil) { [self.dateCreated release]; }
		if(self.description != nil) { [self.description release]; }
		if(self._id != nil) { [self._id release]; }
		if(self.transactionId != nil) { [self.transactionId release]; }
		[super dealloc];
	}

@end
